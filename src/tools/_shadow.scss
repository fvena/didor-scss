/**
 * Computes a top-shadow for a card effect.
 *
 * @param {Number} $depth - depth level
 *
 * @return {List}
 */
@function top-shadow($depth) {
  $primary-offset: nth(1 3 10 14 19, $depth) * 1px;
  $blur: nth(3 6 20 28 38, $depth) * 1px;
  $depthColor: rgba(var(--color-shadow), nth(0.12 0.16 0.19 0.25 0.3, $depth));

  @return 0 $primary-offset $blur $depthColor;
}

/**
 * Computes a bottom-shadow for a card effect.
 *
 * @param {Number} $depth - depth level
 *
 * @return {List}
 */
@function bottom-shadow($depth) {
  $primary-offset: nth(1 3 6 10 15, $depth) * 1px;
  $blur: nth(2 6 6 10 22, $depth) * 1px;
  $depthColor: rgba(var(--color-shadow), nth(0.24 0.23 0.23 0.22 0.22, $depth));

  @return 0 $primary-offset $blur $depthColor;
}

/**
 * Gives a card depth effect.
 *
 * @param {Number} $depth - depth level (between 1 and 5)
 *
 * @link https://www.google.com/design/spec/layout/layout-principles.html#layout-principles-dimensionality Google Design
 *
 * @requires {function} top-shadow
 * @requires {function} bottom-shadow
 */
@mixin shadow($depth) {
  @if $depth < 1 {
    box-shadow: none;
  } @else if $depth > 5 {
    @warn "Invalid $depth `#{$depth}` for mixin `card`.";
  } @else {
    box-shadow: bottom-shadow($depth), top-shadow($depth);
  }
}
